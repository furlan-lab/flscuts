set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
seur@reductions$umap@cell.embeddings <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
DimPlot(seur, group.by = "ground_truth")
seur@reductions$umap@cell.embeddings
seur <- FindNeighbors(seur)
seur <- RunUMAP(seur)
seur <- RunUMAP(seur, dims = 2)
seur <- RunUMAP(seur, dims = 1:40)
DimPlot(seur)
ElbowPlot(seur, ndims = 100)
seur@reductions$umap@cell.embeddings <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
DimPlot(seur, group.by = "ground_truth")
seur <- RunUMAP(seur, dims = 1:40)
seur@reductions$umap@cell.embeddings
uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
seur@reductions$umap@cell.embeddings <-
umat_mat <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
colnames(umap_mat)
umat_mat <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
umap_mat <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T
)
colnames(umap_mat)
colnames(umap_mat)<-c("umap_1", "umap_2")
seur@reductions$umap@cell.embeddings <- umap_mat
DimPlot(seur, group.by = "ground_truth")
umap_mat <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T,
ret_model = T
)
umap_res <- uwot::umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T,
ret_model = T
)
umap_res
colnames(umap_res$embedding)<-c("umap_1", "umap_2")
seur@reductions$umap@cell.embeddings <- umap_res$embedding
DimPlot(seur, group.by = "ground_truth")
library(uwot)
umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30])
umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
seu <- RunUMAP(seu)
seu <- RunUMAP(seu, dims = 1:40)
umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
seur@reductions$umap@cell.embeddings <- umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
DimPlot(seu, group.by = "mCelltype")
DimPlot(seur, group.by = "ground_truth")
umap_res <- umap(
X = seur@reductions$pca@cell.embeddings[,1:30],
n_neighbors = 30L,
n_components = 2L,
metric = "cosine",
n_epochs = NULL,
learning_rate = 1,
min_dist = 0.3,
spread = 1,
set_op_mix_ratio = 1,
local_connectivity = 1L,
repulsion_strength = 1,
negative_sample_rate = 5, verbose = T,
ret_model = T
)
seu <- RunUMAP(seu, dims = 1:40)
colnames(umap_res$embedding)<-c("umap_1", "umap_2")
seur@reductions$umap@cell.embeddings <- umap_res$embedding
DimPlot(seur, group.by = "ground_truth")
seu <- RunUMAP(seu, dims = 1:40)
seu@reductions$umap@cell.embeddings <- umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
DimPlot(seu, group.by = "mCelltype")
umap_transform_res <- umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
colnames(umap_transform_res)
colnames(umap_transform_res)<-c("umap_1", "umap_2")
DimPlot(seu, group.by = "mCelltype")
umap_transform_res <- umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
colnames(umap_transform_res)<-c("umap_1", "umap_2")
seu@reductions$umap@cell.embeddings
umap_transform_res <- umap_transform(X = seur@reductions$pca@cell.embeddings[,1:30], model = umap_res)
colnames(umap_transform_res)<-c("umap_1", "umap_2")
seu@reductions$umap@cell.embeddings <- umap_transform_res
DimPlot(seu, group.by = "mCelltype")
umap_transform_res
seu <- RunUMAP(seu, dims = 1:40)
class(seu@reductions$umap@cell.embeddings)
class(umap_transform_res)
umap_transform_res
seu@reductions$umap@cell.embeddings
umap_transform_res <- umap_transform(X = seu@reductions$pca@cell.embeddings[,1:30], model = umap_res)
colnames(umap_transform_res)<-c("umap_1", "umap_2")
seu@reductions$umap@cell.embeddings <- umap_transform_res
DimPlot(seu, group.by = "mCelltype")
seu <- RunSLSI(seu)
seu <- RunSLSI(seu)
seu <- RunSLSI(seur)
cdsr <- seurat_to_monocle3(seur)
cdsr <- iterative_LSI(cdsr)
tf_idf_transform
cdsr <- iterative_LSI(cdsr, LSI_method = 1)
iterative_LSI
debug(iterative_LSI)
cdsr <- iterative_LSI(cdsr, LSI_method = 1)
cdsr <- iterative_LSI(cdsr, LSI_method = 1)
cdsr <- iterative_LSI(cdsr, LSI_method = 1)
tf_idf_transform
tf_idf_transform
roxygen2::roxygenise()
cdsr <- iterative_LSI(cdsr)
remotes::install_version("Matrix", version = "1.6-1")
install.packages("irlba")
install.packages("irlba")
roxygen2::roxygenise()
cdsr <- iterative_LSI(cdsr)
rm(list=ls())
# Define dataset paths depending on your machine
if(grepl("^gizmo", Sys.info()["nodename"])){
ROOT_DIR1<-"/fh/fast/furlan_s/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/fh/fast/furlan_s/grp/data/ddata/BM_data"
ROOT_DIR3<-"/fh/fast/furlan_s/experiments/LRPBMC/cds"
} else {
ROOT_DIR1<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/datasets/Healthy_BM_greenleaf"
ROOT_DIR3<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/LRPBMC/cds"
}
# Load required packages
suppressPackageStartupMessages({
library(flscuts)
library(Seurat)
library(monocle3)
library(viewmastR)
library(ggplot2)
})
roxygen2::roxygenise()
# Calculate and plot gene dispersion in query dataset
seu <- calculate_gene_dispersion(seu)
seu <- select_genes(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seu)
library(flscuts)
# Calculate and plot gene dispersion in query dataset
seu <- calculate_gene_dispersion(seu)
library(Seurat)
library(monocle3)
library(Seurat)
remotes::install_version("Matrix", version = "1.6-3")
install.packages("irlba")
install.packages("irlba")
rm(list=ls())
# Define dataset paths depending on your machine
if(grepl("^gizmo", Sys.info()["nodename"])){
ROOT_DIR1<-"/fh/fast/furlan_s/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/fh/fast/furlan_s/grp/data/ddata/BM_data"
ROOT_DIR3<-"/fh/fast/furlan_s/experiments/LRPBMC/cds"
} else {
ROOT_DIR1<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/datasets/Healthy_BM_greenleaf"
ROOT_DIR3<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/LRPBMC/cds"
}
# Load required packages
suppressPackageStartupMessages({
library(flscuts)
library(Seurat)
library(monocle3)
library(viewmastR)
library(ggplot2)
})
# Load query and reference datasets
seur <- readRDS(file.path(ROOT_DIR1, "240813_final_object.RDS"))
DimPlot(seur, group.by = "ground_truth")
seu <-readRDS(file.path(ROOT_DIR3, "240919_5p_seu.RDS"))
DimPlot(seu, group.by = "mCelltype")
# Calculate and plot gene dispersion in query dataset
seu <- calculate_gene_dispersion(seu)
seu <- select_genes(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seu)
vgq <- get_selected_genes(seu)
# Repeat the process for the reference dataset
seur <- calculate_gene_dispersion(seur)
seur <- select_genes(seur, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seur)
vgr <- get_selected_genes(seur)
# Find common genes
vg <- intersect(vgq, vgr)
VariableFeatures(seu)<-vg
VariableFeatures(seur)<-vg
#remotes::install_version("Matrix", version = "1.6-3")
#install.packages("irlba")
roxygen2::roxygenise()
seu <- NormalizeData(seu) %>% ScaleData()
library(magrittr)
seu <- NormalizeData(seu) %>% ScaleData()
cdsr <- seurat_to_monocle3(seur)
cdsr <- iterative_LSI(cdsr)
install.packages("irlba", type="source)
#install.packages("irlba", type="source")
install.packages("irlba", type="source")
install.packages("irlba", type = "source")
rm(list=ls())
# Define dataset paths depending on your machine
if(grepl("^gizmo", Sys.info()["nodename"])){
ROOT_DIR1<-"/fh/fast/furlan_s/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/fh/fast/furlan_s/grp/data/ddata/BM_data"
ROOT_DIR3<-"/fh/fast/furlan_s/experiments/LRPBMC/cds"
} else {
ROOT_DIR1<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/MB_10X_5p/cds"
ROOT_DIR2<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/datasets/Healthy_BM_greenleaf"
ROOT_DIR3<-"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/LRPBMC/cds"
}
devtools::install_github("furlan-lab/flscuts")
devtools::install_github("furlan-lab/flscuts")
#remotes::install_version("Matrix", version = "1.6-3")
#install.packages("irlba", type="source")
roxygen2::roxygenise()
# Load query and reference datasets
seur <- readRDS(file.path(ROOT_DIR1, "240813_final_object.RDS"))
DimPlot(seur, group.by = "ground_truth")
seu <-readRDS(file.path(ROOT_DIR3, "240919_5p_seu.RDS"))
DimPlot(seu, group.by = "mCelltype")
# Calculate and plot gene dispersion in query dataset
seu <- calculate_gene_dispersion(seu)
seu <- select_genes(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seu)
vgq <- get_selected_genes(seu)
# Repeat the process for the reference dataset
seur <- calculate_gene_dispersion(seur)
seur <- select_genes(seur, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seur)
vgr <- get_selected_genes(seur)
# Find common genes
vg <- intersect(vgq, vgr)
VariableFeatures(seu)<-vg
VariableFeatures(seur)<-vg
library(Seurat)
library(monocle3)
library(viewmastR)
library(ggplot2)
library(magrittr)
# Load query and reference datasets
seur <- readRDS(file.path(ROOT_DIR1, "240813_final_object.RDS"))
DimPlot(seur, group.by = "ground_truth")
seu <-readRDS(file.path(ROOT_DIR3, "240919_5p_seu.RDS"))
DimPlot(seu, group.by = "mCelltype")
# Calculate and plot gene dispersion in query dataset
seu <- calculate_gene_dispersion(seu)
seu <- select_genes(seu, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seu)
vgq <- get_selected_genes(seu)
# Repeat the process for the reference dataset
seur <- calculate_gene_dispersion(seur)
seur <- select_genes(seur, top_n = 10000, logmean_ul = -1, logmean_ll = -8)
plot_gene_dispersion(seur)
vgr <- get_selected_genes(seur)
# Find common genes
vg <- intersect(vgq, vgr)
VariableFeatures(seu)<-vg
VariableFeatures(seur)<-vg
seu <- NormalizeData(seu) %>% ScaleData()
cdsr <- seurat_to_monocle3(seur)
cdsr <- iterative_LSI(cdsr)
debug(iterative_LSI)
cdsr <- iterative_LSI(cdsr)
cdsr <- iterative_LSI(cdsr)
undebug(iterative_LSI)
cdsr <- iterative_LSI(cdsr)
debug(iterative_LSI)
cdsr <- iterative_LSI(cdsr)
cdsr <- iterative_LSI(cdsr)
num_dim
svd_lsi
tf
svd_lsi
svd_lsi(tf, num_dim, mat_only=FALSE)
svd_lsi(tf, num_dim, mat_only=TRUE)
debug(svd_lis)
debug(svd_lis)
debug(svd_lsi)
svd_lsi(tf, num_dim, mat_only=FALSE)
diag(svd$d)
colnames(sp_mat)
svd_lsi(tf, num_dim, mat_only=FALSE)
colnames(sp_mat)
rownames(mat_svd)
dim(mat_svd)
#devtools::install_github('scfurl/m3addon')
rm(list=ls())
knitr::opts_chunk$set(fig.width=10, fig.height=8, warning=FALSE, message=FALSE)
suppressPackageStartupMessages({
library(monocle3)
library(m3addon)
library(dplyr)
library(Matrix)
library(ggplot2)
library(pals)
library(knitr)
})
#devtools::install_github('scfurl/m3addon')
rm(list=ls())
knitr::opts_chunk$set(fig.width=10, fig.height=8, warning=FALSE, message=FALSE)
suppressPackageStartupMessages({
library(monocle3)
#library(m3addon)
library(dplyr)
library(Matrix)
library(ggplot2)
library(pals)
library(knitr)
})
library(flscuts)
#colors
ccol<-c("#FF0000", "#1C2170", "#009641", "#961E96", "#F47421", "#FFF000")
c2<-("58C6B8 B687D7 B2673D 393735 415988 E98597 F8D600 AD8752 C35C54 B29BDF CE281D 612B58 B0E9E6 CED5EB 2A5D67 752121 C35158 A8DF67 9B7250 EFB8E2 338246 7E378D F4950C BEBB81 294E55 C79E6C")
ctcol<-paste0("#", unlist(strsplit(c2, "\\ ")))
#download
rse<-readRDS(gzcon(url("https://jeffgranja.s3.amazonaws.com/MPAL-10x/Supplementary_Data/Healthy-Data/scRNA-Healthy-Hematopoiesis-191120.rds")))
#make cds
rna<-monocle3::new_cell_data_set(assay(rse), cell_metadata = colData(rse), gene_metadata = mcols(rse))
mcols(rse)
mcols(rna)
mcols(rna)$gene_short_name <- mcols(rna)$gene_name
#munge a bit
fData(rna)$gene_short_name<-rownames(rse)
colData(rna)$n_umi<-colSums(assay(rna))
colData(rna)$log_umi<-log(colData(rna)$n_umi, base=10)
#set some colors
names(ccol)<-levels(factor(pData(rna)$Group))
names(ctcol)<-levels(factor(pData(rna)$BioClassification))
#plot basic qc
qc<-data.frame(umi_per_cell=colData(rna)$n_umi, sample=colData(rna)$Group, log_umi=colData(rna)$log_umi)
ggplot(qc, aes(x=sample, y=umi_per_cell, fill=sample))+
geom_violin()+
geom_boxplot(width=0.3, fill="white")+scale_fill_manual(values=ccol)
ggplot(qc, aes(x=log_umi, fill=sample))+
geom_density(alpha=0.4)+scale_fill_manual(values=ccol)
#iterative LSI
PCs <- 25 #Number of PCs for clustering
n_top <- c(3000,2500,2500) #number of features
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
undebug(iterative_LSI)
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
undebug(svd_lsi)
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
devtools::install_github('scfurl/m3addon')
#devtools::install_github('scfurl/m3addon')
rm(list=ls())
knitr::opts_chunk$set(fig.width=10, fig.height=8, warning=FALSE, message=FALSE)
suppressPackageStartupMessages({
library(monocle3)
#library(flscuts)
library(m3addon)
library(dplyr)
library(Matrix)
library(ggplot2)
library(pals)
library(knitr)
})
#colors
ccol<-c("#FF0000", "#1C2170", "#009641", "#961E96", "#F47421", "#FFF000")
c2<-("58C6B8 B687D7 B2673D 393735 415988 E98597 F8D600 AD8752 C35C54 B29BDF CE281D 612B58 B0E9E6 CED5EB 2A5D67 752121 C35158 A8DF67 9B7250 EFB8E2 338246 7E378D F4950C BEBB81 294E55 C79E6C")
ctcol<-paste0("#", unlist(strsplit(c2, "\\ ")))
#download
rse<-readRDS(gzcon(url("https://jeffgranja.s3.amazonaws.com/MPAL-10x/Supplementary_Data/Healthy-Data/scRNA-Healthy-Hematopoiesis-191120.rds")))
#make cds
rna<-monocle3::new_cell_data_set(assay(rse), cell_metadata = colData(rse), gene_metadata = mcols(rse))
#munge a bit
fData(rna)$gene_short_name<-rownames(rse)
colData(rna)$n_umi<-colSums(assay(rna))
colData(rna)$log_umi<-log(colData(rna)$n_umi, base=10)
#set some colors
names(ccol)<-levels(factor(pData(rna)$Group))
names(ctcol)<-levels(factor(pData(rna)$BioClassification))
#plot basic qc
qc<-data.frame(umi_per_cell=colData(rna)$n_umi, sample=colData(rna)$Group, log_umi=colData(rna)$log_umi)
ggplot(qc, aes(x=sample, y=umi_per_cell, fill=sample))+
geom_violin()+
geom_boxplot(width=0.3, fill="white")+scale_fill_manual(values=ccol)
ggplot(qc, aes(x=log_umi, fill=sample))+
geom_density(alpha=0.4)+scale_fill_manual(values=ccol)
#iterative LSI
PCs <- 25 #Number of PCs for clustering
n_top <- c(3000,2500,2500) #number of features
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
debug(iterative_LSI)
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
cluster_LSI
iterative_LSI()
iterative_LSI
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
undebug(iterative_LSI)
iterative_LSI
debug(cluster_LSI)
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
debug(iterative_LSI)
rna<-iterative_LSI(rna, num_dim = PCs, num_features = n_top, resolution = c(2e-4, 9e-4, 1e-3), verbose = T)
monocle3:::leiden_clustering(data = svd_list$matSVD,
pd = colData(cds), k = leiden_k, weight = leiden_weight,
num_iter = leiden_iter, resolution_parameter = resolution[1],
random_seed = seed, verbose = verbose, ...)
monocle3:::leiden_clustering
devtools::install_github('cole-trapnell-lab/monocle3')
