% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{find_partitions}
\alias{find_partitions}
\title{Find Partitions in a Seurat Object Similar to Monocle3}
\usage{
find_partitions(
  obj,
  method = "louvain",
  k = 20,
  reduction = "umap",
  dims = NULL,
  weight = FALSE,
  num_iter = 1,
  resolution_parameter = NULL,
  random_seed = 2020,
  verbose = TRUE,
  partition_q_value = 0.05
)
}
\arguments{
\item{obj}{A Seurat object.}

\item{method}{A character string specifying the clustering algorithm to use: \code{"louvain"} or \code{"leiden"}. Default is \code{"louvain"}.}

\item{k}{Integer specifying the number of nearest neighbors (k) to use when constructing the k-NN graph. Default is 20.}

\item{reduction}{A character string specifying the dimensionality reduction to use (e.g., \code{"pca"}, \code{"umap"}). Default is \code{"umap"}.}

\item{dims}{A vector of integers specifying the dimensions to use from the specified reduction. If \code{NULL}, all dimensions are used. Default is \code{NULL}.}

\item{weight}{Logical indicating whether to use edge weights in clustering. Default is \code{FALSE}.}

\item{num_iter}{Integer specifying the number of iterations for the Leiden algorithm. Default is 1.}

\item{resolution_parameter}{Numeric value specifying the resolution parameter for clustering. Default is \code{NULL}, which uses the Seurat default.}

\item{random_seed}{Integer specifying the random seed for reproducibility. Default is 2020.}

\item{verbose}{Logical indicating whether to display messages during computation. Default is \code{TRUE}.}

\item{partition_q_value}{Not used in this implementation. Included for compatibility.}
}
\value{
A Seurat object with partitions added to the metadata (\code{obj$partitions}).
}
\description{
Finds partitions (low-resolution clusters) in a Seurat object using Louvain or Leiden clustering, similar to the \code{find_partition} function in Monocle3. This function computes partitions by clustering the cells and then grouping clusters into partitions based on connectivity.
}
\details{
This function performs clustering using the specified method and then computes partitions by constructing a cluster graph and finding connected components. Cells belonging to clusters within the same connected component are assigned to the same partition.
}
\examples{
\dontrun{
library(Seurat)
# Assuming 'seurat_obj' is a Seurat object with PCA and UMAP computed
seurat_obj <- find_partitions(seurat_obj, method = "leiden", k = 20, reduction = "umap", dims = 1:10)
# The partitions can be accessed via seurat_obj$partitions
}
}
\keyword{internal}
